#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('path').resolve
  , join = require('path').join
  , existsSync = require('path').existsSync
  , program = require('commander')
  , connect = require('connect')
  , coffee = require('coffee-script')
  , stylus = require('stylus')
  , jade = require('jade')
  , url = require('url')
  , fs = require('fs');

// CLI

program
  .version('1.0.2')
  .usage('[options] [dir]')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-c, --cspath <cspath>', 'specify the path to coffee files [src/coffee]', String, 'src/coffee')
  .option('-j, --jspath <jspath>', 'specify the basepath to js files [javascripts]', String, 'javascripts')
  .option('-H, --hidden', 'enable hidden file serving')
  .option('-S, --no-stylus', 'disable stylus rendering')
  .option('-J, --no-jade', 'disable jade rendering')
  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-C, --no-coffee', 'disable coffeescript rendering')
  .parse(process.argv);

// path
var path = resolve(program.args.shift() || '.');

// setup the server
var server = connect();

// ignore favicon
server.use(connect.favicon());

// logger
if (program.logs) server.use(connect.logger(program.format));

// convert .styl to .css to trick stylus.middleware
if (program.stylus) {
  server.use(function(req, res, next){
    req.url = req.url.replace(/\.styl$/, '.css');
    next();
  });
}

// Compile CoffeeScript
if (program.coffee) {
  server.use(function(req, res, next){
    if (!req.url.match(/\.js$/)) return next();
    // Check if the js exists already
    if( existsSync(join(path, url.parse(req.url).pathname)) ){
      return next();
    } else {
      var file = join(path, url.parse(req.url).pathname.replace(program.jspath, program.cspath).replace(/\.js/, '.coffee'));
      fs.readFile(file, 'ascii', function(err, str){
        if (err) return next(err);
        try {
          res.setHeader('Content-Type', 'application/x-javascript');
          js = coffee.compile( str );
          res.end(js);
        } catch (err) {
          next(err);
        }
      });
    
    }
  });
}

// jade
if (program.jade) {
  server.use(function(req, res, next){
    if (!req.url.match(/\.jade$/)) return next();
    var file = join(path, url.parse(req.url).pathname);
    fs.readFile(file, 'utf8', function(err, str){
      if (err) return next(err);
      try {
        var fn = jade.compile(str, { filename: file });
        str = fn();
        res.setHeader('Content-Type', 'text/plain');
        res.setHeader('Content-Length', str.length);
        res.end(str);
      } catch (err) {
        next(err);
      }
    });
  });
}

// stylus
server.use(stylus.middleware({ src: path }));

// static files
server.use(connect.static(path, { hidden: program.hidden }));

// directory serving

if (program.dirs) {
    server.use(connect.directory(path, {
      hidden: program.hidden
    , icons: program.icons
  }));
}

// start the server
server.listen(program.port);
console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, server.address().port);
